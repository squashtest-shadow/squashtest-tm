<?xml version="1.0" encoding="UTF-8"?>
<!--

        This file is part of the Squashtest platform.
        Copyright (C) 2010 - 2013 Henix, henix.fr

        See the NOTICE file distributed with this work for additional
        information regarding copyright ownership.

        This is free software: you can redistribute it and/or modify
        it under the terms of the GNU Lesser General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        this software is distributed in the hope that it will be useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        GNU Lesser General Public License for more details.

        You should have received a copy of the GNU Lesser General Public License
        along with this software.  If not, see <http://www.gnu.org/licenses/>.

-->
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-2.0.xsd">

	<changeSet id="tm-1.8.0.issue-2933-tc-01" author="mpagnon">
		<comment>save ids of test case folders to delete</comment>
		<sql>
			insert into ENTITIES_TO_DELETE
			(NAME, ID)
			select 'TEST_CASE_FOLDER', folder.TCLN_ID
			from TEST_CASE_FOLDER folder
			where folder.TCLN_ID not in (
				select DESCENDANT_ID from TCLN_RELATIONSHIP  UNION
				select CONTENT_ID from TEST_CASE_LIBRARY_CONTENT
			)
			;
		</sql>
		<comment>store info if exist test case folders to delete</comment>
		<sql>
			insert into IS_TO_DELETE
			(NAME, TOTAL)
			select 'TEST_CASE_FOLDER', count(1)
			from ENTITIES_TO_DELETE
			where NAME = 'TEST_CASE_FOLDER'
			;
		</sql>
	</changeSet>

	<!-- =========== FOLDER =========== -->
	<changeSet id="tm-1.8.0.issue-2933-tc-02" author="mpagnon">
		<preConditions onFail="CONTINUE" onFailMessage="No orphan test case folder">
			<not>
				<sqlCheck expectedResult="0">
					select TOTAL from IS_TO_DELETE
					where NAME = 'TEST_CASE_FOLDER'
					;
				</sqlCheck>
			</not>
		</preConditions>
		<comment>save ids of children test_case_folders</comment>
		<sql>
			insert into ENTITIES_TO_DELETE
			(NAME, ID)
			select distinct 'TEST_CASE_FOLDER', folder.TCLN_ID
			from TEST_CASE_FOLDER folder, TCLN_RELATIONSHIP_CLOSURE tclnrc, ENTITIES_TO_DELETE etd
			where etd.NAME = 'TEST_CASE_FOLDER'
			and etd.ID = tclnrc.ANCESTOR_ID
			and	tclnrc.DESCENDANT_ID = folder.TCLN_ID
			;
		</sql>
		<comment>save ids of orphan and children test_case</comment>
		<sql>
			insert into ENTITIES_TO_DELETE
			(NAME, ID)
			select distinct 'TEST_CASE', testcase.TCLN_ID
			from TEST_CASE testcase
			where testcase.TCLN_ID not in (
				select DESCENDANT_ID from TCLN_RELATIONSHIP  UNION
				select CONTENT_ID from TEST_CASE_LIBRARY_CONTENT
			)
			;
			
			insert into ENTITIES_TO_DELETE
			(NAME, ID)
			select distinct 'TEST_CASE', testcase.TCLN_ID
			from TEST_CASE testcase, TCLN_RELATIONSHIP_CLOSURE tclnrc, ENTITIES_TO_DELETE etd
			where etd.NAME = 'TEST_CASE_FOLDER'
			and etd.ID = tclnrc.ANCESTOR_ID
			and tclnrc.DESCENDANT_ID = testcase.TCLN_ID
			;
		</sql>
		<comment>save property if exist test case to delete</comment>
		<sql>
			insert into IS_TO_DELETE
			(NAME, TOTAL)
			select 'TEST_CASE', count(1)
			from ENTITIES_TO_DELETE etd
			where etd.NAME = 'TEST_CASE'
			;
		</sql>
		<comment>save ids of attachment_lists</comment>
		<sql>
			insert into ENTITIES_TO_DELETE
			(NAME, ID)
			select 'ATTACHMENT_LIST', tcln.ATTACHMENT_LIST_ID
			from TEST_CASE_LIBRARY_NODE tcln , ENTITIES_TO_DELETE etd
			where tcln.TCLN_ID = etd.ID
			and etd.NAME in ('TEST_CASE_FOLDER', 'TEST_CASE')
			;
		</sql>
	</changeSet>
	
	<!-- =========== TEST_CASE =========== -->
	<changeSet id="tm-1.8.0.issue-2933-tc-03" author="mpagnon">
		<preConditions onFail="CONTINUE" onFailMessage="No test case to delete">
			<not>
				<sqlCheck expectedResult="0">
					select TOTAL from IS_TO_DELETE
					where NAME = 'TEST_CASE_FOLDER'
					;
				</sqlCheck>
			</not><not>
				<sqlCheck expectedResult="0">
					select TOTAL from IS_TO_DELETE
					where NAME = 'TEST_CASE'
					;
				</sqlCheck>
			</not>
		</preConditions>
		<comment>empty ids of requirement_version_coverage to delete from requirements deletion</comment>
		<sql>
			delete from ENTITIES_TO_DELETE
			where NAME = 'REQUIREMENT_VERSION_COVERAGE'
			;
		</sql>
		<comment>save ids of requirement_version_coverage</comment>
		<sql>
			insert into ENTITIES_TO_DELETE
			(NAME, ID)
			select 'REQUIREMENT_VERSION_COVERAGE', rvc.REQUIREMENT_VERSION_COVERAGE_ID
			from REQUIREMENT_VERSION_COVERAGE rvc, ENTITIES_TO_DELETE etd
			where rvc.VERIFYING_TEST_CASE_ID = etd.ID
			and etd.NAME = 'TEST_CASE'
			;
		</sql>
		<comment>save ids of test_case cufs values to delete</comment>
		<sql>
			insert into ENTITIES_TO_DELETE
			(NAME, ID)
			select 'CUSTOM_FIELD_VALUE', cfv.CFV_ID
			from CUSTOM_FIELD_VALUE cfv, ENTITIES_TO_DELETE etd
			where etd.ID = cfv.BOUND_ENTITY_ID
			and cfv.BOUND_ENTITY_TYPE = 'TEST_CASE'
			and etd.NAME = 'TEST_CASE'
			;
		</sql>
		<comment>save ids of campaign concerned by campaign_test_plan_item deletion</comment>
		<sql>
			insert into ENTITIES_TO_DELETE
			(NAME, ID)
			select 'CTPI_CAMPAIGN' , ctpi.CAMPAIGN_ID
			from CAMPAIGN_TEST_PLAN_ITEM ctpi, ENTITIES_TO_DELETE etd
			where etd.ID = ctpi.TEST_CASE_ID
			and etd.NAME = 'TEST_CASE'
			;
		</sql>
		<comment>save all parameter ids</comment>
		<sql>
			insert into ENTITIES_TO_DELETE
			(NAME, ID)
			select 'PARAMETER', param.PARAM_ID
			from PARAMETER param, ENTITIES_TO_DELETE etd
			where etd.ID = param.TEST_CASE_ID
			and etd.NAME = 'TEST_CASE'
			;
		</sql>
		<comment>save all dataset ids</comment>
		<sql>
			insert into ENTITIES_TO_DELETE
			(NAME, ID)
			select 'DATASET', ds.DATASET_ID
			from DATASET ds, ENTITIES_TO_DELETE etd
			where etd.ID = ds.TEST_CASE_ID
			and etd.NAME = 'TEST_CASE'
			;
		</sql>
		<comment>save automated_test_ids</comment>
		<sql>
			insert into ENTITIES_TO_DELETE
			(NAME, ID)
			select 'AUTOMATED_TEST', tc.TA_TEST
			from TEST_CASE tc, ENTITIES_TO_DELETE etd
			where etd.ID = tc.TCLN_ID
			and etd.NAME = 'TEST_CASE'
			and tc.TA_TEST is not null
			;
		</sql>
		<comment>save test_step ids</comment>
		<sql>
			insert into ENTITIES_TO_DELETE
			(NAME, ID)
			select 'TEST_STEP', tcs.STEP_ID
			from TEST_CASE_STEPS tcs, ENTITIES_TO_DELETE etd
			where etd.ID = tcs.TEST_CASE_ID
			and etd.NAME = 'TEST_CASE'
			;
		</sql>
		<comment>save ids of test_step calling deleted test cases</comment>
		<sql>
			insert into ENTITIES_TO_DELETE
			(NAME, ID)
			select 'CALLING_STEP', cts.TEST_STEP_ID
			from CALL_TEST_STEP cts, ENTITIES_TO_DELETE etd
			where etd.ID = cts.CALLED_TEST_CASE_ID
			and etd.NAME = 'TEST_CASE'
			;
		</sql>
		<sql>
			insert into IS_TO_DELETE
			(NAME, TOTAL)
			select 'CALLING_STEP', count(1)
			from ENTITIES_TO_DELETE etd
			where etd.NAME = 'CALLING_STEP'
			;
		</sql>
		<comment>set tcln_id to null on execution table</comment>
		<sql>
			update EXECUTION
			set TCLN_ID = null
			where TCLN_ID in (select ID
			from ENTITIES_TO_DELETE where NAME = 'TEST_CASE')
			;
		</sql>
		<comment>set tcln_id to null on iteration_test_plan_item</comment>
		<sql>
			update ITERATION_TEST_PLAN_ITEM
			set TCLN_ID = null
			where TCLN_ID in (select ID from ENTITIES_TO_DELETE where NAME = 'TEST_CASE')
			;
		</sql>
	</changeSet>
	
	<!-- =========== REQUIREMENT_VERSION_COVERAGE =========== -->
	<changeSet id="tm-1.8.0.issue-2933-tc-04" author="mpagnon">
		<preConditions onFail="CONTINUE" onFailMessage="No requirement version coverage to delete">
			<and>
				<not>
					<sqlCheck expectedResult="0">
						select TOTAL from IS_TO_DELETE
						where NAME = 'TEST_CASE_FOLDER'
						;
					</sqlCheck>
				</not>
				<not>
					<sqlCheck expectedResult="0">
						select TOTAL from IS_TO_DELETE
						where NAME = 'TEST_CASE'
						;
					</sqlCheck>
				</not>
				<not>
					<sqlCheck expectedResult="0">
						select count(1)
						from ENTITIES_TO_DELETE
						where NAME = 'REQUIREMENT_VERSION_COVERAGE'
						;
					</sqlCheck>
				</not>
			</and>
		</preConditions>
		<comment>delete verifying_steps</comment>
		<sql>
			delete from VERIFYING_STEPS
			where REQUIREMENT_VERSION_COVERAGE_ID in (
				select ID from ENTITIES_TO_DELETE where NAME = 'REQUIREMENT_VERSION_COVERAGE'
			)
			;
		</sql>
		<sql>
			delete from REQUIREMENT_VERSION_COVERAGE
			where REQUIREMENT_VERSION_COVERAGE_ID in (
				select ID from ENTITIES_TO_DELETE where NAME = 'REQUIREMENT_VERSION_COVERAGE'
			)
			;
		</sql>
	</changeSet>
	
	<!-- =========== CAMPAIGN_TEST_PLAN_ITEM =========== -->
	<changeSet id="tm-1.8.0.issue-2933-tc-05-mysql" author="mpagnon">
		<preConditions onFail="CONTINUE" onFailMessage="Not mysql database or No campaign iteration items to delete">
			<and>
				<dbms type="mysql" />
				<not>
					<sqlCheck expectedResult="0">
						select TOTAL from IS_TO_DELETE
						where NAME = 'TEST_CASE_FOLDER'
						;
					</sqlCheck>
				</not>
				<not>
					<sqlCheck expectedResult="0">
						select TOTAL from IS_TO_DELETE
						where NAME = 'TEST_CASE'
						;
					</sqlCheck>
				</not>
				<not>
					<sqlCheck expectedResult="0">
						select count(1) from ENTITIES_TO_DELETE
						where NAME = 'CTPI_CAMPAIGN'
						;
					</sqlCheck>
				</not>
			</and>
		</preConditions>
		<comment>delete campaign_test_plan_item</comment>
		<sql>
			delete from CAMPAIGN_TEST_PLAN_ITEM
			where TEST_CASE_ID in (select ID from ENTITIES_TO_DELETE where NAME = 'TEST_CASE');
		</sql>
		<comment>reorder test plan of campaign where deletion of campaign_test_plan_item occurred</comment>
		<sql>
			create temporary table CAMPAIGN_TEST_PLAN_ITEM_TEMP(
			CAMPAIGN_ID BIGINT NOT NULL,
			CTPI_ID BIGINT NOT NULL,
			TEST_PLAN_ORDER INT NOT NULL
			);

			set @rownum:=0;
			insert into CAMPAIGN_TEST_PLAN_ITEM_TEMP
			(CAMPAIGN_ID, CTPI_ID, TEST_PLAN_ORDER)
			select CAMPAIGN_ID, CTPI_ID, @rownum:=@rownum+1 as globindex
			from CAMPAIGN_TEST_PLAN_ITEM
			where CAMPAIGN_ID in (
				select ID from ENTITIES_TO_DELETE where NAME = 'CTPI_CAMPAIGN'
			)
			group by CAMPAIGN_ID, CTPI_ID, globindex
			order by TEST_PLAN_ORDER;

			create temporary table CAMPAIGN_TEST_PLAN_ITEM_TEMP2 
			(
			CAMPAIGN_ID
			BIGINT NOT NULL,
			CTPI_ID BIGINT NOT NULL,
			TEST_PLAN_ORDER INT NOT NULL
			);
			
			
			insert into CAMPAIGN_TEST_PLAN_ITEM_TEMP2
			select * 
			from CAMPAIGN_TEST_PLAN_ITEM_TEMP;

			update CAMPAIGN_TEST_PLAN_ITEM ctpi
			set TEST_PLAN_ORDER = (
				select count( ctpit2.CTPI_ID )
				from CAMPAIGN_TEST_PLAN_ITEM_TEMP ctpit1,CAMPAIGN_TEST_PLAN_ITEM_TEMP2 ctpit2
				where ctpit1.CTPI_ID = ctpi.CTPI_ID
				and ctpit2.CAMPAIGN_ID = ctpit1.CAMPAIGN_ID
				and ctpit1.TEST_PLAN_ORDER > ctpit2.TEST_PLAN_ORDER
			);


			drop table CAMPAIGN_TEST_PLAN_ITEM_TEMP;
			drop table CAMPAIGN_TEST_PLAN_ITEM_TEMP2;
		</sql>
	</changeSet>
	
	<changeSet id="tm-1.8.0.issue-2933-tc-05-h2" author="mpagnon">
		<preConditions onFail="CONTINUE" onFailMessage="Not h2 database or No campaign iteration items to delete">
			<and>
				<dbms type="h2" />
				<not>
					<sqlCheck expectedResult="0">
						select TOTAL from IS_TO_DELETE
						where NAME = 'TEST_CASE_FOLDER'
						;
					</sqlCheck>
				</not>
				<not>
					<sqlCheck expectedResult="0">
						select TOTAL from IS_TO_DELETE
						where NAME = 'TEST_CASE'
						;
					</sqlCheck>
				</not>
				<not>
					<sqlCheck expectedResult="0">
						select count(1) from ENTITIES_TO_DELETE
						where NAME = 'CTPI_CAMPAIGN'
						;
					</sqlCheck>
				</not>
			</and>
		</preConditions>
		<comment>delete campaign_test_plan_item</comment>
		<sql>
			delete from CAMPAIGN_TEST_PLAN_ITEM
			where TEST_CASE_ID in (select ID from ENTITIES_TO_DELETE where NAME = 'TEST_CASE');
		</sql>
		<comment>reorder test plan of campaign where deletion of campaign_test_plan_item occurred</comment>
		<sql>
			create temporary table CAMPAIGN_TEST_PLAN_ITEM_TEMP
			(
			CAMPAIGN_ID
			BIGINT NOT NULL,
			CTPI_ID BIGINT NOT NULL,
			TEST_PLAN_ORDER INT NOT NULL
			);

			set @rn=-1;
			insert into CAMPAIGN_TEST_PLAN_ITEM_TEMP
			(CAMPAIGN_ID, CTPI_ID, TEST_PLAN_ORDER)
			select CAMPAIGN_ID, CTPI_ID, set(@rn, @rn+1) as globindex
			from CAMPAIGN_TEST_PLAN_ITEM
			where CAMPAIGN_ID in (select ID from ENTITIES_TO_DELETE where NAME = 'CTPI_CAMPAIGN')
			group by CAMPAIGN_ID, CTPI_ID, globindex
			order by TEST_PLAN_ORDER;

			create temporary table CAMPAIGN_TEST_PLAN_ITEM_TEMP2 
			(
			CAMPAIGN_ID
			BIGINT NOT NULL,
			CTPI_ID BIGINT NOT NULL,
			TEST_PLAN_ORDER INT NOT NULL
			);
			
			insert into CAMPAIGN_TEST_PLAN_ITEM_TEMP2
			select * from CAMPAIGN_TEST_PLAN_ITEM_TEMP;

			update CAMPAIGN_TEST_PLAN_ITEM ctpi
			set TEST_PLAN_ORDER = (
				select count( ctpit2.CTPI_ID )
				from CAMPAIGN_TEST_PLAN_ITEM_TEMP ctpit1,CAMPAIGN_TEST_PLAN_ITEM_TEMP2 ctpit2
				where ctpit1.CTPI_ID = ctpi.CTPI_ID
				and ctpit2.CAMPAIGN_ID = ctpit1.CAMPAIGN_ID
				and ctpit1.TEST_PLAN_ORDER > ctpit2.TEST_PLAN_ORDER
			);


			drop table CAMPAIGN_TEST_PLAN_ITEM_TEMP;
			drop table CAMPAIGN_TEST_PLAN_ITEM_TEMP2;
		</sql>
	</changeSet>
	
	<!-- =========== DATASET - PARAMETERS =========== -->
		<changeSet id="tm-1.8.0.issue-2933-tc-06" author="mpagnon">
		<preConditions onFail="CONTINUE" onFailMessage="No dataset to delete">
			<and>
				<not>
					<sqlCheck expectedResult="0">
						select TOTAL from IS_TO_DELETE
						where NAME = 'TEST_CASE_FOLDER'
						;
					</sqlCheck>
				</not>
				<not>
					<sqlCheck expectedResult="0">
						select TOTAL from IS_TO_DELETE
						where NAME = 'TEST_CASE'
						;
					</sqlCheck>
				</not>
				<not>
					<sqlCheck expectedResult="0">
						select count(1) from
						ENTITIES_TO_DELETE
						where NAME = 'DATASET';
					</sqlCheck>
				</not>
			</and>
		</preConditions>
		<comment>set dataset to null in referenced entity</comment>
		<sql>
			update ITERATION_TEST_PLAN_ITEM 
			set DATASET_ID = null
			where DATASET_ID in (select ID from ENTITIES_TO_DELETE where NAME ='DATASET');
		</sql>
		<comment>delete dataset_param_value where dataset id</comment>
		<sql>
			delete from DATASET_PARAM_VALUE
			where DATASET_ID in (select ID from ENTITIES_TO_DELETE where NAME = 'DATASET');
		</sql>
		<comment>delete dataset</comment>
		<sql>
			delete from DATASET
			where DATASET_ID in (select ID from ENTITIES_TO_DELETE where NAME = 'DATASET');
		</sql>
	</changeSet>
	
	<changeSet id="tm-1.8.0.issue-2933-tc-07" author="mpagnon">
		<preConditions onFail="CONTINUE" onFailMessage="No parameter to delete">
			<and>
				<not>
					<sqlCheck expectedResult="0">
						select TOTAL from IS_TO_DELETE
						where NAME = 'TEST_CASE_FOLDER'
						;
					</sqlCheck>
				</not>
				<not>
					<sqlCheck expectedResult="0">
						select TOTAL from IS_TO_DELETE
						where NAME = 'TEST_CASE'
						;
					</sqlCheck>
				</not>
				<not>
					<sqlCheck expectedResult="0">
						select count(1) from ENTITIES_TO_DELETE
						where NAME = 'PARAMETER';
					</sqlCheck>
				</not>
			</and>
		</preConditions>
		<comment>delete dataset_param_value where param_id</comment>
		<sql>
			delete from DATASET_PARAM_VALUE
			where PARAM_ID in (select ID from ENTITIES_TO_DELETE where NAME = 'PARAMETER');
		</sql>
		<comment>delete parameters</comment>
		<sql>
			delete from PARAMETER
			where PARAM_ID in (select ID from ENTITIES_TO_DELETE where NAME = 'PARAMETER');
		</sql>
	</changeSet>
	
	<!-- =========== AUTOMATED_TEST =========== -->
	<changeSet id="tm-1.8.0.issue-2933-tc-08" author="mpagnon">
		<preConditions onFail="CONTINUE" onFailMessage="No Automated test to delete">
			<and>
				<not>
					<sqlCheck expectedResult="0">
						select TOTAL from IS_TO_DELETE
						where NAME = 'TEST_CASE_FOLDER'
						;
					</sqlCheck>
				</not>
				<not>
					<sqlCheck expectedResult="0">
						select TOTAL from IS_TO_DELETE
						where NAME = 'TEST_CASE'
						;
					</sqlCheck>
				</not>
				<not>
					<sqlCheck expectedResult="0">
						select count(1) from ENTITIES_TO_DELETE
						where NAME = 'AUTOMATED_TEST';
					</sqlCheck>
				</not>
			</and>
		</preConditions>
		<comment>delete automated_execution_extender</comment>
		<sql>
			delete from AUTOMATED_EXECUTION_EXTENDER
			where TEST_ID in (select ID from ENTITIES_TO_DELETE where NAME = 'AUTOMATED_TEST')
			;
		</sql>
		<comment>delete automated_suite where not exist automated_execution_extender linked to it</comment>
		<sql>
			delete from AUTOMATED_SUITE
			where SUITE_ID not in (select SUITE_ID from AUTOMATED_EXECUTION_EXTENDER)
			;
		</sql>
	</changeSet>
	
	<!-- =========== TEST STEP =========== -->
	<changeSet id="tm-1.8.0.issue-2933-tc-09" author="mpagnon">
		<preConditions onFail="CONTINUE" onFailMessage="No test step to delete">
			<and>
				<not>
					<sqlCheck expectedResult="0">
						select TOTAL from IS_TO_DELETE
						where NAME = 'TEST_CASE_FOLDER'
						;
					</sqlCheck>
				</not>
				<not>
					<sqlCheck expectedResult="0">
						select TOTAL from IS_TO_DELETE
						where NAME = 'TEST_CASE'
						;
					</sqlCheck>
				</not>
				<not>
					<sqlCheck expectedResult="0">
						select count(1) from ENTITIES_TO_DELETE
						where NAME = 'TEST_STEP'
						;
					</sqlCheck>
				</not>
			</and>
		</preConditions>
		<comment>save ids of step cufs values to delete</comment>
		<sql>
			insert into ENTITIES_TO_DELETE
			(NAME, ID)
			select 'CUSTOM_FIELD_VALUE', cfv.CFV_ID
			from CUSTOM_FIELD_VALUE cfv, ENTITIES_TO_DELETE etd
			where etd.ID = cfv.BOUND_ENTITY_ID
			and cfv.BOUND_ENTITY_TYPE = 'TEST_STEP'
			and etd.NAME = 'TEST_STEP'
			;
		</sql>
		<comment>set test_step_id to null on execution_step table</comment>
		<sql>
			update EXECUTION_STEP
			set TEST_STEP_ID = null
			where TEST_STEP_ID in (select ID from ENTITIES_TO_DELETE where NAME = 'TEST_STEP')
			;
		</sql>
		<comment>save ids of steps attachment_list</comment>
		<sql>
			insert into ENTITIES_TO_DELETE
			(NAME, ID)
			select 'ATTACHMENT_LIST', ats.ATTACHMENT_LIST_ID
			from ACTION_TEST_STEP ats, ENTITIES_TO_DELETE etd
			where ats.TEST_STEP_ID = etd.ID
			and etd.NAME = 'TEST_STEP'
			;
		</sql>
		<comment>delete test_case_steps </comment>
		<sql>
			delete from TEST_CASE_STEPS
			where TEST_CASE_ID in (select ID from ENTITIES_TO_DELETE where NAME = 'TEST_CASE')
			;
		</sql>
		<comment>delete call_step </comment>
		<sql>delete from CALL_TEST_STEP
			where TEST_STEP_ID in (select ID from ENTITIES_TO_DELETE where NAME = 'TEST_STEP')
			;
		</sql>
		<comment>delete action_step</comment>
		<sql>delete from ACTION_TEST_STEP
			where TEST_STEP_ID in (select ID from ENTITIES_TO_DELETE where NAME = 'TEST_STEP')
			;
		</sql>
		<comment>delete test step</comment>
		<sql>delete from TEST_STEP
			where TEST_STEP_ID in (select ID from ENTITIES_TO_DELETE where NAME = 'TEST_STEP')
			;
		</sql>
	</changeSet>
	
	<!-- =========== CALLING TEST STEP =========== -->
	<changeSet id="tm-1.8.0.issue-2933-tc-10" author="mpagnon">
		<preConditions onFail="CONTINUE" onFailMessage="No step calling a to-delete test case">
			<and>
				<sqlCheck expectedResult="1">
					select count(1) from IS_TO_DELETE
					where NAME = 'CALLING_STEP'
					;
				</sqlCheck>
				<not>
					<sqlCheck expectedResult="0">
						select TOTAL from IS_TO_DELETE
						where NAME = 'CALLING_STEP'
						;
					</sqlCheck>
				</not>
			</and>
		</preConditions>
		<comment>save ids of calling test case</comment>
		<sql>
			insert into ENTITIES_TO_DELETE
			(NAME, ID)
			select 'CALLING_TEST_CASE' , tcs.TEST_CASE_ID
			from TEST_CASE_STEPS tcs ,	ENTITIES_TO_DELETE etd
			where tcs.STEP_ID = etd.ID
			and etd.NAME =	'CALLING_STEP'
			;
		</sql>
		<comment>set null to test_step_id on execution_step</comment>
		<sql>
			update EXECUTION_STEP
			set TEST_STEP_ID = null
			where TEST_STEP_ID in
			(select ID from ENTITIES_TO_DELETE where NAME = 'CALLING_STEP')
			;
		</sql>
		<comment>delete test_step and call_test_step</comment>
		<sql>
			delete from CALL_TEST_STEP
			where TEST_STEP_ID in (select ID from ENTITIES_TO_DELETE where NAME = 'CALLING_STEP')
			;
			delete from TEST_CASE_STEPS
			where STEP_ID in (select ID from ENTITIES_TO_DELETE where NAME = 'CALLING_STEP')
			;
			delete from TEST_STEP
			where TEST_STEP_ID in (select ID from ENTITIES_TO_DELETE where NAME = 'CALLING_STEP')
			;
		</sql>
	</changeSet>
	
	<changeSet id="tm-1.8.0.issue-2933-tc-11-mysql" author="mpagnon">
		<preConditions onFail="CONTINUE" onFailMessage="Not mysql or No step calling a to-delete test case">
			<and>
				<dbms type="mysql" />
				<sqlCheck expectedResult="1">
					select count(1) from IS_TO_DELETE
					where NAME = 'CALLING_STEP'
					;
				</sqlCheck>
				<not>
					<sqlCheck expectedResult="0">
						select TOTAL from IS_TO_DELETE
						where NAME = 'CALLING_STEP'
						;
					</sqlCheck>
				</not>
			</and>
		</preConditions>
		<comment>reorder steps of calling test case</comment>
		<sql>
			create temporary table TEST_CASE_STEPS_TEMP(
			TEST_CASE_ID
			BIGINT
			NOT NULL,
			STEP_ID BIGINT NOT NULL,
			STEP_ORDER INT NOT NULL
			);

			set @rownum:=0;
			insert into TEST_CASE_STEPS_TEMP
			(TEST_CASE_ID, STEP_ID, STEP_ORDER)
			select TEST_CASE_ID, STEP_ID, @rownum:=@rownum+1 as globindex
			from TEST_CASE_STEPS
			where TEST_CASE_ID in (select ID from ENTITIES_TO_DELETE where NAME = 'tcs_CAMPAIGN')
			group by TEST_CASE_ID, STEP_ID, globindex
			order by STEP_ORDER;

			create temporary table TEST_CASE_STEPS_TEMP2 (
			TEST_CASE_ID BIGINT NOT NULL,
			STEP_ID BIGINT NOT NULL,
			STEP_ORDER INT NOT NULL
			);
			
			insert into TEST_CASE_STEPS_TEMP2
			select * from TEST_CASE_STEPS_TEMP;

			update TEST_CASE_STEPS tcs
			set STEP_ORDER = (
				select count( tcst2.STEP_ID )
				from TEST_CASE_STEPS_TEMP tcst1,TEST_CASE_STEPS_TEMP2 tcst2
				where tcst1.STEP_ID = tcs.STEP_ID
				and tcst2.TEST_CASE_ID = tcst1.TEST_CASE_ID
				and tcst1.STEP_ORDER > tcst2.STEP_ORDER
			);

			drop table TEST_CASE_STEPS_TEMP;
			drop table TEST_CASE_STEPS_TEMP2;
		</sql>
	</changeSet>
	
	<changeSet id="tm-1.8.0.issue-2933-tc-11-h2" author="mpagnon">
		<preConditions onFail="CONTINUE" onFailMessage="Not h2 or No step calling a to-delete test case">
			<and>
				<dbms type="h2" />
				<sqlCheck expectedResult="1">
					select count(1) from IS_TO_DELETE
					where NAME = 'CALLING_STEP'
					;
				</sqlCheck>
				<not>
					<sqlCheck expectedResult="0">
						select TOTAL from IS_TO_DELETE
						where NAME = 'CALLING_STEP'
						;
					</sqlCheck>
				</not>
			</and>
		</preConditions>
		<comment>reorder steps of calling test case</comment>
		<sql>
			create temporary table TEST_CASE_STEPS_TEMP(
			TEST_CASE_ID BIGINT NOT NULL,
			STEP_ID BIGINT NOT NULL,
			STEP_ORDER INT NOT NULL
			);

			set @rn=-1;
			insert into TEST_CASE_STEPS_TEMP
			(TEST_CASE_ID, STEP_ID, STEP_ORDER)
			select TEST_CASE_ID, STEP_ID, set(@rn, @rn+1) as globindex
			from TEST_CASE_STEPS
			where TEST_CASE_ID in (select ID from ENTITIES_TO_DELETE where NAME = 'CALLING_TEST_CASE')
			group by TEST_CASE_ID, STEP_ID, globindex
			order by STEP_ORDER;

			create temporary table TEST_CASE_STEPS_TEMP2 (
			TEST_CASE_ID BIGINT NOT NULL,
			STEP_ID BIGINT NOT NULL,
			STEP_ORDER INT NOT NULL
			);
			insert into TEST_CASE_STEPS_TEMP2
			select * from
			TEST_CASE_STEPS_TEMP;

			update TEST_CASE_STEPS tcs
			set STEP_ORDER = (
				select count( tcst2.STEP_ID )
				from TEST_CASE_STEPS_TEMP tcst1,TEST_CASE_STEPS_TEMP2 tcst2
				where tcst1.STEP_ID = tcs.STEP_ID
				and tcst2.TEST_CASE_ID = tcst1.TEST_CASE_ID
				and tcst1.STEP_ORDER > tcst2.STEP_ORDER
			);


			drop table TEST_CASE_STEPS_TEMP;
			drop table TEST_CASE_STEPS_TEMP2;
		</sql>
	</changeSet>
	
	
	<!-- =========== TEST CASE =========== -->
	<changeSet id="tm-1.8.0.issue-2933-tc-12" author="mpagnon">
		<preConditions onFail="CONTINUE" onFailMessage="No test case to delete">
			<and>
				<not>
					<sqlCheck expectedResult="0">
						select TOTAL from IS_TO_DELETE
						where NAME = 'TEST_CASE_FOLDER'
						;
					</sqlCheck>
				</not>
				<not>
					<sqlCheck expectedResult="0">
						select TOTAL from IS_TO_DELETE
						where NAME = 'TEST_CASE'
						;
					</sqlCheck>
				</not>
			</and>
		</preConditions>
		<comment>delete tcln_relationship_closure for test case</comment>
		<sql>
			delete from TCLN_RELATIONSHIP_CLOSURE 
			where DESCENDANT_ID in (select ID from ENTITIES_TO_DELETE where NAME = 'TEST_CASE');
		</sql>
		<comment>delete tcln_relationship for test case </comment>
		<sql>
			delete from TCLN_RELATIONSHIP
			where DESCENDANT_ID in (select ID from ENTITIES_TO_DELETE where NAME = 'TEST_CASE');
		</sql>
		<comment>delete test_cases</comment>
		<sql>
			delete from TEST_CASE
			where TCLN_ID in (select ID from ENTITIES_TO_DELETE where NAME = 'TEST_CASE')
			;
		</sql>
		<comment>delete test_case_library_node</comment>
		<sql>
			delete from TEST_CASE_LIBRARY_NODE 
			where TCLN_ID in (select ID from ENTITIES_TO_DELETE where NAME = 'TEST_CASE');
		</sql>
	</changeSet>
	
	<!-- =========== FOLDER =========== -->
	<changeSet id="tm-1.8.0.issue-2933-tc-13" author="mpagnon">
		<preConditions onFail="CONTINUE" onFailMessage="No test case folder to delete.">
			<not>
					<sqlCheck expectedResult="0">
						select TOTAL from IS_TO_DELETE
						where NAME = 'TEST_CASE_FOLDER'
						;
					</sqlCheck>
				</not>
		</preConditions>
		<comment>delete tcln_relationship_closure for test case folder</comment>		
		<sql>
			delete from TCLN_RELATIONSHIP_CLOSURE 
			where DESCENDANT_ID in (select ID from ENTITIES_TO_DELETE where NAME = 'TEST_CASE_FOLDER');
		</sql>
		<comment>delete tcln_relationship for test case folder</comment>
		<sql>
			delete from TCLN_RELATIONSHIP
			where DESCENDANT_ID in (select ID from ENTITIES_TO_DELETE where NAME = 'TEST_CASE_FOLDER');
		</sql>
		<comment>delete test_case_folder</comment>
		<sql>
			delete from TEST_CASE_FOLDER
			where TCLN_ID in (select ID from ENTITIES_TO_DELETE where NAME = 'TEST_CASE_FOLDER');
		</sql>
		<comment>delete test_case_library_node</comment>
		<sql>
			delete from TEST_CASE_LIBRARY_NODE 
			where TCLN_ID in (select ID from ENTITIES_TO_DELETE where NAME = 'TEST_CASE_FOLDER');
		</sql>
	</changeSet>



</databaseChangeLog>
 