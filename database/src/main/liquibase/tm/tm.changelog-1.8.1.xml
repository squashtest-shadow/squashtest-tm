<?xml version="1.0" encoding="UTF-8"?>
<!--

        This file is part of the Squashtest platform.
        Copyright (C) 2010 - 2013 Henix, henix.fr

        See the NOTICE file distributed with this work for additional
        information regarding copyright ownership.

        This is free software: you can redistribute it and/or modify
        it under the terms of the GNU Lesser General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        this software is distributed in the hope that it will be useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        GNU Lesser General Public License for more details.

        You should have received a copy of the GNU Lesser General Public License
        along with this software.  If not, see <http://www.gnu.org/licenses/>.

-->
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-2.0.xsd">
	
	<changeSet id="tm-1.8.1" author="flaurens">
		<comment>Update TM database version number</comment>
		<update tableName="CORE_CONFIG">
			<column name="VALUE" value="1.8.1" />
			<where>STR_KEY = 'squashtest.tm.database.version'</where>
		</update>
	</changeSet>
	
	<changeSet id="tm-1.8.1.feature-3120-01" author="flaurens">
		<comment>Adding denormalized field option table for editable denormalized list valued cufs</comment>
		<createTable tableName="DENORMALIZED_FIELD_OPTION">
			<column name="DFV_ID" type="BIGINT">
				<constraints nullable="false" references="DENORMALIZED_FIELD_VALUE(DFV_ID)" foreignKeyName="fk_df_option_dfv"/>
			</column>
			<column name="LABEL" type="VARCHAR(255)">
				<constraints nullable="false" />
			</column>
			<column name="POSITION" type="INT">
				<constraints nullable="false" />
			</column>
			<column name="CODE" type="VARCHAR(30)">
				<constraints nullable="false" />
			</column>
		</createTable>
	</changeSet>

	
	<changeSet id="tm-1.8.1.feature-3120-02" author="flaurens">
		<comment>Old list valued cufs are editable as simple text cufs</comment>
		<update tableName="DENORMALIZED_FIELD_VALUE">
		    <column name="INPUT_TYPE" value="PLAIN_TEXT" />
            <where>INPUT_TYPE = 'DROPDOWN_LIST'</where>
		</update>
	</changeSet>
	
	

	<changeSet id="tm-1.8.1-feat-3127-01" author="bsiri">
		<comment>As of now X_LIBRARY_PLUGINS are now entities and becomes subclasses of LIBRARY_PLUGIN_BINDING</comment>
		
		<createTable tableName="LIBRARY_PLUGIN_BINDING">
			<column name="PLUGIN_BINDING_ID" type="BIGINT" autoIncrement="true" remarks="primary key (autogenerated)" >
				<constraints nullable="false" primaryKey="true"/>
			</column>		
		</createTable>
		
	</changeSet>
	
	<changeSet id="tm-1.8.1-feat-3127-02" author="bsiri">
		<comment>creation of  TEST_CASE_LIBRARY_PLUGIN_BINDING</comment>
		
		<createTable tableName="TEST_CASE_LIBRARY_PLUGIN_BINDING">	
			<column name="PLUGIN_BINDING_ID" type="BIGINT" remarks="primary key, also foreign key to LIBRARY_PLUGIN_BINDING">
				<constraints primaryKey="true" nullable="false" primaryKeyName="pk_tclib_plugin" 
							foreignKeyName="fk_tclibplugin_libplugin" references="LIBRARY_PLUGIN_BINDING(PLUGIN_BINDING_ID)"/>
			</column>
			
			<column name="LIBRARY_ID" type="BIGINT" remarks="foreign key to TEST_CASE_LIBRARY">
				<constraints foreignKeyName="fk_tclibplugin_tclib" nullable="false" references="TEST_CASE_LIBRARY(TCL_ID)"/>
			</column>
			
			<column name="PLUGIN_ID" type="java.sql.Types.VARCHAR(50)" 
					remarks="id of the plugin. Note that those plugins aren't stored in the database and the plugin registry is purely software 
					(it is basically based on the presence/absence of an OSGI services published by each plugin) so we cannot really enforce referential
					integrity. Still, although technically that	column cannot be a foreign key, the application uses it as if.">
				
				<constraints nullable="false"/>
				
			</column>
		</createTable>
		
		<addUniqueConstraint tableName="TEST_CASE_LIBRARY_PLUGIN_BINDING" columnNames="PLUGIN_BINDING_ID, LIBRARY_ID" 
					constraintName="uniq_tclib_plugin_binding" />
		
	</changeSet>

	<changeSet id="tm-1.8.1-feat-3127-03" author="bsiri">
		<comment>creation of REQUIREMENT_LIBRARY_PLUGIN_BINDING</comment>		
	
		
		<createTable tableName="REQUIREMENT_LIBRARY_PLUGIN_BINDING">	
			
			<column name="PLUGIN_BINDING_ID" type="BIGINT" remarks="primary key, also foreign key to LIBRARY_PLUGIN_BINDING">
				<constraints primaryKey="true" nullable="false" primaryKeyName="pk_reqlib_plugin" 
							foreignKeyName="fk_reqlibplugin_libplugin" references="LIBRARY_PLUGIN_BINDING(PLUGIN_BINDING_ID)"/>
			</column>
			
			<column name="LIBRARY_ID" type="BIGINT" remarks="foreign key to REQUIREMENT_LIBRARY">
				<constraints foreignKeyName="fk_reqlibplugin_reqlib" nullable="false" references="REQUIREMENT_LIBRARY(RL_ID)"/>
			</column>
			
			<column name="PLUGIN_ID" type="java.sql.Types.VARCHAR(50)" 
					remarks="id of the plugin. Note that those plugins aren't stored in the database and the plugin registry is purely software 
					(it is basically based on the presence/absence of an OSGI services published by each plugin) so we cannot really enforce referential
					integrity. Still, although technically that	column cannot be a foreign key, the application uses it as if.">
				
				<constraints nullable="false"/>
				
			</column>
		</createTable>
		
		
		<addUniqueConstraint tableName="REQUIREMENT_LIBRARY_PLUGIN_BINDING" columnNames="PLUGIN_BINDING_ID, LIBRARY_ID" 
					constraintName="uniq_reqlib_plugin_binding" />
		
	</changeSet>			
					
	<changeSet id="tm-1.8.1-feat-3127-04" author="bsiri">
		<comment>creation of CAMPAIGN_LIBRARY_PLUGIN_BINDING</comment>			

		
		<createTable tableName="CAMPAIGN_LIBRARY_PLUGIN_BINDING">	
			
			<column name="PLUGIN_BINDING_ID" type="BIGINT" remarks="primary key, also foreign key to LIBRARY_PLUGIN_BINDING">
				<constraints primaryKey="true" nullable="false" primaryKeyName="pk_camlib_plugin" 
							foreignKeyName="fk_camlibplugin_libplugin" references="LIBRARY_PLUGIN_BINDING(PLUGIN_BINDING_ID)"/>
			</column>
			
			<column name="LIBRARY_ID" type="BIGINT" remarks="foreign key to CAMPAIGN_LIBRARY">
				<constraints foreignKeyName="fk_camlibplugin_camlib" nullable="false" references="CAMPAIGN_LIBRARY(CL_ID)"/>
			</column>
			
			<column name="PLUGIN_ID" type="java.sql.Types.VARCHAR(50)" 
					remarks="id of the plugin. Note that those plugins aren't stored in the database and the plugin registry is purely software 
					(it is basically based on the presence/absence of an OSGI services published by each plugin) so we cannot really enforce referential
					integrity. Still, although technically that	column cannot be a foreign key, the application uses it as if.">
				
				<constraints nullable="false"/>
				
			</column>
		</createTable>
		
		<addUniqueConstraint tableName="CAMPAIGN_LIBRARY_PLUGIN_BINDING" columnNames="PLUGIN_BINDING_ID, LIBRARY_ID" 
					constraintName="uniq_camlib_plugin_binding" />					
					
	</changeSet>
	
	<changeSet id="tm-1.8.1-feat-3127-05" author="bsiri">
		<comment>trash the old tables. Migrating them isn't worth it.</comment>
		
		<dropTable tableName="TEST_CASE_LIBRARY_PLUGINS"/>
		<dropTable tableName="REQUIREMENT_LIBRARY_PLUGINS"/>
		<dropTable tableName="CAMPAIGN_LIBRARY_PLUGINS"/>
	
	</changeSet>
	
	<changeSet id="tm-1.8.1-feat-3127-06" author="bsiri">
		<comment>create the table LIBRARY_PLUGIN_PROPERTY</comment>
		
		<createTable tableName="LIBRARY_PLUGIN_BINDING_PROPERTY">
			
			<column name="PLUGIN_BINDING_ID" type="BIGINT" remarks="foreign key to LIBRARY_PLUGIN_BINDING">
				<constraints nullable="false" foreignKeyName="fk_libplugin_property_libplugin" references="LIBRARY_PLUGIN_BINDING(PLUGIN_BINDING_ID)"/>
			</column>
			
			<column name="PLUGIN_BINDING_KEY" type="java.sql.Types.VARCHAR(30)" remarks="key of this property">
				<constraints nullable="false"/>
			</column>
		
			<column name="PLUGIN_BINDING_VALUE" type="java.sql.Types.VARCHAR(255)" remarks="value of this property">
				<constraints nullable="false"/>
			</column>
				
		</createTable>
	
	</changeSet>		
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
</databaseChangeLog>