<?xml version="1.0" encoding="UTF-8"?>
<!--

        This file is part of the Squashtest platform.
        Copyright (C) 2010 - 2012 Henix, henix.fr

        See the NOTICE file distributed with this work for additional
        information regarding copyright ownership.

        This is free software: you can redistribute it and/or modify
        it under the terms of the GNU Lesser General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        this software is distributed in the hope that it will be useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        GNU Lesser General Public License for more details.

        You should have received a copy of the GNU Lesser General Public License
        along with this software.  If not, see <http://www.gnu.org/licenses/>.

-->
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.0.xsd">


	<http  auto-config="true" use-expressions="true" entry-point-ref="authenticationProcessingFilterEntryPoint"   >
		<!-- Login page config -->
		<intercept-url pattern="/login" access="permitAll" />

		<!-- Logout page config; we have to set "home-workspace" instead of "/" for logout url to avoid "/null" url -->
		<logout invalidate-session="true" logout-success-url="/home-workspace" logout-url="/logout"  />
		
		<request-cache ref="httpSessionRequestCache"/>

		<!-- Pages restricted to admins -->
		<intercept-url requires-channel="${authentication.application.securablechannels}" pattern="/admin" access="hasRole('ROLE_ADMIN')" />
		<intercept-url requires-channel="${authentication.application.securablechannels}" pattern="/admin/**" access="hasRole('ROLE_ADMIN')" />
		<intercept-url requires-channel="${authentication.application.securablechannels}" pattern="/administration" access="hasRole('ROLE_TM_PROJECT_MANAGER') or hasRole('ROLE_ADMIN')" />
		<intercept-url requires-channel="${authentication.application.securablechannels}" pattern="/configuration" access="hasRole('ROLE_ADMIN')" />
		<intercept-url requires-channel="${authentication.application.securablechannels}" pattern="/configuration/**" access="hasRole('ROLE_ADMIN')" />
		<intercept-url requires-channel="${authentication.application.securablechannels}" pattern="/administration/bugtrackers" access="hasRole('ROLE_ADMIN')" />
		<intercept-url requires-channel="${authentication.application.securablechannels}" pattern="/administration/bugtrackers/**" access="hasRole('ROLE_ADMIN')" />
		<intercept-url requires-channel="${authentication.application.securablechannels}" pattern="/administration/projects" access="hasRole('ROLE_TM_PROJECT_MANAGER') or hasRole('ROLE_ADMIN')" />
 		<intercept-url requires-channel="${authentication.application.securablechannels}" pattern="/administration/projects/**" access="hasRole('ROLE_TM_PROJECT_MANAGER') or hasRole('ROLE_ADMIN')" />
 		<intercept-url requires-channel="${authentication.application.securablechannels}" pattern="/administration/users" access="hasRole('ROLE_ADMIN')" />
		<intercept-url requires-channel="${authentication.application.securablechannels}" pattern="/administration/users/**" access="hasRole('ROLE_ADMIN')" />
		

        <!--  images and stuff dont need authentication -->
        <intercept-url pattern="/images/**" filters="none" />
        <intercept-url pattern="/styles/**" filters="none" />
        <intercept-url pattern="/scripts/**" filters="none"/>
        
        
		<!-- One must log in to access the application -->
		<intercept-url pattern="/**" access="isAuthenticated()" />
		
		<!-- API for test automation clients -->
		<intercept-url requires-channel="${authentication.application.securablechannels}" pattern="/resultUpdate/**" access="hasRole('ROLE_TA_API_CLIENT')" />

		<!-- we must specify this to force redirect to login page when failure happens
		and avoid unstyled login error page generated by spring -->
		
		<form-login authentication-failure-url="/login.jsp?login-error"  authentication-success-handler-ref="accessGrantedHandler" />
		
		<access-denied-handler ref="accessDeniedHandler" />
		
		<custom-filter ref="htmlSanitizationFilter" position="FIRST"/> 
		
	</http>
	
	
	<beans:bean id="exceptionTranslationFilter" class="org.springframework.security.web.access.ExceptionTranslationFilter">
	  <beans:property name="authenticationEntryPoint" ref="authenticationProcessingFilterEntryPoint"/>
	  <beans:property name="accessDeniedHandler" ref="accessDeniedHandler"/>
	</beans:bean>
	
	<beans:bean id="httpSessionRequestCache" class="org.squashtest.tm.web.internal.controller.authentication.LoginFormDiscardingHttpSessionRequestCache">
		<beans:property name="justUseSavedRequestOnGet" value="true"/>
		<beans:property name="loginFormUrl" value="/login.jsp" />
	</beans:bean>

	
	<beans:bean id="accessDeniedHandler" class="org.squashtest.tm.web.internal.security.authentication.MyAccessDeniedHandler" >
	  <beans:property name="errorPage" value="/squash/accessDenied"/>
	</beans:bean>
	
	<beans:bean id="accessGrantedHandler" 
				class="org.squashtest.tm.web.internal.security.authentication.AuthenticationSuccessCallbacksHandler" 
				>
		<beans:property name="callbacks" ref="core.web.registry.authSuccessCallback"/>		
	</beans:bean>


	<beans:bean id="authenticationProcessingFilterEntryPoint" class="org.squashtest.tm.web.internal.security.authentication.RedirectEntryPoint">
	 	<beans:property name="loginFormUrl" value="/login" />
	 	<beans:property name="forceHttps" value="${authentication.application.forcehttps}" />
	</beans:bean>
	

	<beans:bean id="htmlSanitizationFilter" class="org.squashtest.tm.web.internal.filter.HtmlSanitizationFilter"/>

	<authentication-manager
		alias="squashtest.core.security.AuthenticationManager">
		<authentication-provider user-service-ref="squashtest.core.security.JdbcUserDetailsManager">			
			<password-encoder hash="sha" />
		</authentication-provider>
	</authentication-manager>
	<!-- 
		the following bean provide a link to the credentials, both reading and editing. 
		todo : create a bean configurable via a .properties file, in case we need to switch 
		to an LDAP provider. 
	  -->
	
	<beans:bean id="squashtest.core.security.JdbcUserDetailsManager"
			class="org.springframework.security.provisioning.JdbcUserDetailsManager">
		
		<beans:property name="dataSource" ref="squashtest.core.persistence.jdbc.DataSource"/>
		<beans:property name="authenticationManager" ref="squashtest.core.security.AuthenticationManager"/>
		
		<beans:property name="usersByUsernameQuery" value="select LOGIN, PASSWORD, ACTIVE from AUTH_USER where LOGIN = ?"/>
		
		<beans:property name="groupAuthoritiesByUsernameQuery">
			<beans:value>
				select g.ID, g.QUALIFIED_NAME, ga.AUTHORITY 
				from CORE_GROUP g 
					inner join CORE_GROUP_AUTHORITY ga on ga.GROUP_ID = g.ID
					inner join CORE_GROUP_MEMBER gm on gm.GROUP_ID = g.ID
					inner join CORE_USER u on u.ID = gm.USER_ID
				where u.LOGIN = ?		
			</beans:value>
		</beans:property>	
		
		<!--  dummy query, see explanation below -->
		<beans:property name="authoritiesByUsernameQuery" value="select login, 'ROLE_USER' from CORE_USER where login = ?">
		
		</beans:property>
		
		<beans:property name="changePasswordSql">
			<beans:value>
				update AUTH_USER
				set PASSWORD = ?
				where LOGIN = ?
			</beans:value>
		</beans:property>
		
		<beans:property name="updateUserSql">
			<beans:value>
				update AUTH_USER
				set PASSWORD = ?, ACTIVE = ?
				where LOGIN = ?
			</beans:value>
		</beans:property>
		
			<beans:property name="deleteUserSql">
			<beans:value>
				delete from AUTH_USER
				where LOGIN = ?
			</beans:value>
		</beans:property>
		
		
		<beans:property name="createUserSql">
			<beans:value>
				insert into AUTH_USER (LOGIN, PASSWORD, ACTIVE) values (?,?,?)
			</beans:value>
		</beans:property>
		
		<!--  
			A successful login attempt requires the user to have at least one authority set (and also a valid login/pass).
			
			Our policy regarding authorities is group-based : there are no per-user authorities and they 
			must be attached to a group.
			
			However due to the restriction mentioned above (about successful login),  we want the user to be granted 
			a default authority if he doesn't belong to a group yet. That authority can merely allow him to 
			connect to the application, but without proper entry in acls he couldn't do much anyway.
			
			So we fetch both personal authorities for the default one, and the group authorities for the real ones. 
			
		-->		
		<!-- 
			Why did the property "enableAuthorities" changed from "true" to "false" ?
		
			The property "enableAuthorities" was at "true" because, at the beginning of squash, users were created "by hand" and for a non admin,  
	 		no entry was put in the table "CORE_GROUP_MEMBER". In this case, if the property were at "false", the user could not access to  
	 		the squash workspace.  
			
	 		Now that users are created with squash, an entry in the table CORE_GROUP_MEMBER is guaranteed. The property could have remained at "true" 
	 		if it was not for the functionality that allows a user to change his login [Issue 806]. To do that, spring would make us delete the old AUTH_USER entry and create a 
	 		new one. While deleting a user it would try to delete all his authorities, and that we don't want. Therefore, now enableAuthorities is "false". 
	 		
	 	-->
		<beans:property name="enableAuthorities" value="false"/>
		<beans:property name="enableGroups" value="true" />
		
		
		
		
	</beans:bean>
	<beans:bean id="permissionFactory" class="org.squashtest.tm.service.security.acls.CustomPermissionFactory" />
	
</beans:beans>